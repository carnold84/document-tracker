{"version":3,"sources":["views/Documents.js","views/AddDocument.js","components/View/View.js","App.js","serviceWorker.js","index.js"],"names":["Documents","AddDocument","className","type","accept","capture","View","children","VIEWS","App","useState","view","setView","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRAQeA,MANf,WACE,OACE,yCCSWC,MAXf,WACE,OACE,8BACE,2CACA,yBAAKC,UAAU,iBACb,2BAAOC,KAAK,OAAOC,OAAO,UAAUC,QAAQ,mB,MCIrCC,MARf,YAA2B,IAAZC,EAAW,EAAXA,SACb,OACE,yBAAKL,UAAU,gBACZK,ICCDC,EACU,eADVA,EAEO,YAgCEC,MA7Bf,WAAgB,IAAD,EACWC,mBAASF,GADpB,mBACNG,EADM,KACAC,EADA,KAWb,OACE,yBAAKV,UAAU,eACZS,IAASH,GACR,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,4BAAQK,QAbM,WACpBD,EAAQJ,KAYF,iBAGHG,IAASH,GACR,kBAAC,EAAD,KACE,4BAAQK,QAdW,WACzBD,EAAQJ,KAaF,SACA,kBAAC,EAAD,SCtBUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ee06a3b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Documents() {\r\n  return (\r\n    <p>Documents</p>\r\n  );\r\n}\r\n\r\nexport default Documents;\r\n","import React from 'react';\r\n\r\nfunction AddDocument() {\r\n  return (\r\n    <main>\r\n      <p>Add Document</p>\r\n      <div className=\"capture-image\">\r\n        <input type=\"file\" accept=\"image/*\" capture=\"environment\" />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AddDocument;\r\n","import React from 'react';\r\nimport './View.css';\r\n\r\nfunction View({children}) {\r\n  return (\r\n    <div className=\"view-wrapper\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default View;\r\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Documents from './views/Documents';\nimport AddDocument from './views/AddDocument';\nimport View from './components/View/View';\n\nconst VIEWS = {\n  ADD_DOCUMENT: 'add_document',\n  DOCUMENTS: 'documents'\n};\n\nfunction App() {\n  const [view, setView] = useState(VIEWS.DOCUMENTS);\n\n  const onAddDocument = () => {\n    setView(VIEWS.ADD_DOCUMENT);\n  };\n\n  const onCloseAddDocument = () => {\n    setView(VIEWS.DOCUMENTS);\n  };\n\n  return (\n    <div className=\"app-wrapper\">\n      {view === VIEWS.DOCUMENTS && (\n        <View>\n          <Documents />\n          <button onClick={onAddDocument}>Add Document</button>\n        </View>\n      )}\n      {view === VIEWS.ADD_DOCUMENT && (\n        <View>\n          <button onClick={onCloseAddDocument}>Close</button>\n          <AddDocument />\n        </View>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}